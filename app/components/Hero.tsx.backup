'use client';

import React, { useState, useEffect, KeyboardEvent } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import './hero.css';
import { useUser } from '../context/UserContext';
import { generateEmoji } from '../services/emojiService';
import { toast } from 'react-hot-toast';
import AuthModals from './AuthModals';

// 3D Fluent Emoji Components
const FluentEmoji: React.FC<{ 
  skinTone: string; 
  hairColor: string; 
  hairStyle: string; 
  shirtColor: string; 
  expression: string;
  specialFeatures?: string;
}> = ({ skinTone, hairColor, hairStyle, shirtColor, expression, specialFeatures }) => (
  <div className="w-full h-20 bg-gradient-to-br from-gray-800 to-gray-900 rounded-2xl flex items-center justify-center relative overflow-hidden shadow-lg hover:shadow-2xl transition-all duration-300 group">
    {/* Background gradient */}
    <div className="absolute inset-0 bg-gradient-to-br from-gray-700 to-gray-800 opacity-80"></div>
    
    {/* Emoji character */}
    <div className="relative z-10 w-12 h-12 flex items-center justify-center">
      {/* Head */}
      <div className={`w-8 h-8 rounded-full ${skinTone} relative`}>
        {/* Hair */}
        <div className={`absolute -top-1 left-0 right-0 ${hairColor} ${hairStyle} rounded-t-full`}></div>
        
        {/* Eyes */}
        <div className="absolute top-3 left-1.5 w-1.5 h-1.5 bg-amber-200 rounded-full"></div>
        <div className="absolute top-3 right-1.5 w-1.5 h-1.5 bg-amber-200 rounded-full"></div>
        
        {/* Expression */}
        <div className={`absolute bottom-2 left-0 right-0 flex justify-center ${expression}`}>
          {expression === 'smile' && (
            <div className="w-3 h-1 bg-gray-700 rounded-full"></div>
          )}
          {expression === 'neutral' && (
            <div className="w-2 h-0.5 bg-gray-700 rounded-full"></div>
          )}
          {expression === 'surprised' && (
            <div className="w-2 h-2 bg-gray-700 rounded-full"></div>
          )}
        </div>
        
        {/* Special Features */}
        {specialFeatures === 'devil-horns' && (
          <>
            <div className="absolute -top-2 -left-1 w-2 h-2 bg-red-600 rounded-full"></div>
            <div className="absolute -top-2 -right-1 w-2 h-2 bg-red-600 rounded-full"></div>
          </>
        )}
      </div>
      
      {/* Shirt */}
      <div className={`absolute -bottom-1 left-0 right-0 h-3 ${shirtColor} rounded-b-lg`}></div>
    </div>
    
    {/* Hover effect */}
    <div className="absolute inset-0 bg-gradient-to-br from-white/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
  </div>
);

const Hero: React.FC = () => {
  const [mounted, setMounted] = useState(false);
  const [inputText, setInputText] = useState('');
  const [emojis, setEmojis] = useState<string[]>([]);
  const { isAuthenticated } = useUser();
  const [emojiPrompt, setEmojiPrompt] = useState('');
  const [loading, setLoading] = useState(false);
  const [isAuthModalOpen, setIsAuthModalOpen] = useState(false);
  const [generatedEmojis, setGeneratedEmojis] = useState<Array<{ url: string; isImage: boolean }>>([]);
  const [generatedEmoji, setGeneratedEmoji] = useState<{
    url: string;
    isImage: boolean;
    metadata?: {
      prompt: string;
      dimensions: string;
      model: string;
      date: string;
    };
  } | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!inputText.trim()) {
      toast.error('Please enter what type of emoji you want to generate');
      return;
    }

    // Check if user is authenticated before generating
    if (!isAuthenticated) {
      setIsAuthModalOpen(true);
      toast('Please login to generate emojis');
      return;
    }

    setLoading(true);
    const loadingToast = toast.loading('Generating your emoji...');

    try {
      console.log(`[tf7udl] Generating emoji for prompt: "${inputText.trim()}"`);
      const response = await generateEmoji(inputText.trim());
      
      console.log(`[tf7udl] Emoji generation response:`, {
        success: response.success,
        emoji: response.emoji,
        errorType: response.errorType,
      });
      
      if (response.success && response.emoji) {
        setGeneratedEmoji({
          url: response.emoji.emoji,
          isImage: response.emoji.isImage || false,
          metadata: response.emoji.metadata
        });
        toast.success('Emoji generated successfully!', {
          id: loadingToast,
        });
      } else {
        // Handle error from response
        const errorMessage = response.error || 'Failed to generate emoji';
        console.error(`[tf7udl] Error in emoji generation:`, {
          error: errorMessage,
          type: response.errorType,
          details: response.details
        });
        toast.error(errorMessage, { id: loadingToast });
      }
    } catch (error) {
      // Handle exception
      console.error(`[tf7udl] Exception in emoji generation:`, error);
      toast.error(
        error instanceof Error 
          ? error.message 
          : 'Failed to generate emoji. Please try again.',
        { id: loadingToast }
      );
    } finally {
      setLoading(false);
    }
  };

  const handleKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      handleSubmit(e);
    }
  };

  useEffect(() => {
    setMounted(true);
  }, []);

  if (!mounted) {
    return null;
  }

  return (
    <div className="relative min-h-[70vh] flex items-center justify-center pt-12 pb-8 overflow-hidden">
      {/* Background */}
      <div className="absolute inset-0 bg-gradient-to-br from-gray-950/30 via-black to-black"></div>
      
      {/* Animated background elements */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute -top-40 -right-40 w-80 h-80 bg-gradient-to-br from-gray-500/20 to-transparent rounded-full blur-3xl animate-pulse"></div>
        <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-gradient-to-tr from-gray-500/20 to-transparent rounded-full blur-3xl animate-pulse delay-1000"></div>
      </div>

      {/* Main content */}
      <div className="relative z-10 w-full max-w-4xl mx-auto px-4">
        <div className="text-center mb-4">
          {/* Hero title with gradient text */}
          <h1 className="text-4xl md:text-5xl font-bold mb-4 relative group">
            <span className="absolute -inset-1 bg-gradient-to-r from-gray-500 via-gray-400 to-gray-600 rounded-2xl blur opacity-20 group-hover:opacity-30 transition duration-1000"></span>
            <span className="relative bg-gradient-to-r from-gray-200 via-white to-gray-300 bg-clip-text text-transparent">
              <span className="text-gray-400">AI Emoji</span> Generator
            </span>
          </h1>
          
          <p className="text-lg md:text-xl text-gray-400 mb-8 max-w-2xl mx-auto">
            Transform your ideas into stunning 3D emojis with the power of AI
          </p>
        </div>

        {/* Emoji Generator Form */}
        <div className="max-w-2xl mx-auto">
          <form onSubmit={handleSubmit} className="flex flex-col sm:flex-row gap-4 mb-8">
            <div className="flex-1 relative group">
              <div className="absolute -inset-1 bg-gradient-to-r from-gray-500 via-gray-400 to-gray-600 rounded-xl blur opacity-20 group-hover:opacity-30 transition duration-500"></div>
              <input
                type="text"
                value={inputText}
                onChange={(e) => setInputText(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="Describe the emoji you want to create..."
                className="w-full px-6 py-4 bg-gray-900/80 backdrop-blur-sm border border-gray-700/50 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-500/50 focus:border-gray-500/50 transition-all duration-300 relative z-10"
              />
            </div>
            
            <button
              type="submit"
              disabled={loading}
              className="px-8 py-4 bg-gradient-to-r from-gray-600 to-gray-700 hover:from-gray-500 hover:to-gray-600 text-white font-semibold rounded-xl transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl disabled:opacity-50 disabled:transform-none disabled:cursor-not-allowed flex items-center justify-center gap-2"
            >
              {loading ? (
                <>
                  <div className="w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                  Generating...
                </>
              ) : (
                <>
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                  </svg>
                  Generate
                </>
              )}
            </button>
          </form>
        </div>

        {/* Generated Emoji Display */}
        <div className="max-w-2xl mx-auto">
          {generatedEmoji && (
            <div className="bg-gray-900/80 backdrop-blur-sm border border-gray-700/50 rounded-2xl p-6 shadow-2xl">
              <div className="text-center mb-4">
                <h3 className="text-xl font-semibold text-white mb-2">Your Generated Emoji</h3>
                <p className="text-gray-400 text-sm">"{inputText}"</p>
              </div>
              
              <div className="flex justify-center mb-6">
                {generatedEmoji.isImage ? (
                  <div className="relative group">
                    <div className="absolute -inset-2 bg-gradient-to-r from-gray-500 via-gray-400 to-gray-600 rounded-2xl blur opacity-20 group-hover:opacity-30 transition duration-500"></div>
                    <img
                      src={generatedEmoji.url}
                      alt={`Generated emoji for: ${inputText}`}
                      className="relative z-10 w-32 h-32 object-cover rounded-2xl shadow-lg"
                    />
                  </div>
                ) : (
                  <div className="text-6xl">{generatedEmoji.url}</div>
                )}
              </div>

              {/* Action Buttons */}
              <div className="grid grid-cols-2 gap-3 mb-4">
                <button
                  onClick={() => {
                    navigator.clipboard.writeText(generatedEmoji.url);
                    toast.success('Emoji URL copied to clipboard!', {
                      iconTheme: {
                        primary: '#6366F1',
                        secondary: '#1F2937',
                      },
                    });
                  }}
                  className="flex-1 px-4 py-3 bg-gradient-to-br from-gray-800 to-gray-900 rounded-xl text-sm font-medium
                            text-gray-200 hover:from-gray-700 hover:to-gray-800 active:scale-95 shadow-md shadow-black/30
                            transition-all duration-200 flex items-center justify-center gap-2 border border-gray-700"
                  aria-label="Copy URL"
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                  </svg>
                  Copy
                </button>
                
                <a
                  href={generatedEmoji.url}
                  download={`emoji-${inputText.replace(/\s+/g, '-')}.png`}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="flex-1 px-4 py-3 bg-gradient-to-br from-gray-600 to-gray-700 rounded-xl text-sm font-medium
                            text-white hover:from-gray-500 hover:to-gray-600 active:scale-95 shadow-md shadow-indigo-900/30
                            transition-all duration-200 flex items-center justify-center gap-2 border border-indigo-500/20"
                  aria-label="Download emoji"
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                  </svg>
                  Download
                </a>
              </div>
                      
              {/* Additional Actions Row */}
              <div className="pt-4 flex justify-between items-center border-t border-gray-800">
                <button
                  onClick={handleSubmit}
                  className="group text-sm text-gray-400 hover:text-gray-300 transition-colors duration-200 flex items-center gap-2"
                  disabled={loading}
                >
                  <svg className="w-4 h-4 group-hover:rotate-180 transition-transform duration-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                  </svg>
                  Regenerate
                </button>
                
                <div className="flex gap-2">
                  <button
                    onClick={() => {
                      if (navigator.share) {
                        navigator.share({
                          title: `AI Emoji: ${inputText}`,
                          text: `Check out this AI-generated emoji for "${inputText}"`,
                          url: generatedEmoji.url
                        }).catch(err => console.error('Error sharing:', err));
                      } else {
                        navigator.clipboard.writeText(generatedEmoji.url);
                        toast.success('URL copied - share it with others!');
                      }
                    }}
                    className="p-2 text-gray-400 hover:text-gray-300 transition-colors duration-200 rounded-full hover:bg-gray-800"
                    aria-label="Share"
                  >
                    <svg className="w-4 h-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z" />
                    </svg>
                  </button>
                </div>
              </div>
            </div>
            
            {/* Credit embedded in card bottom instead of separate element */}
            <div className="text-center py-2">
              <p className="text-xs text-gray-600 inline-block px-2 py-0.5 bg-gray-900/70 backdrop-blur-sm rounded-md">
                <span className="text-gray-400">AI Emoji</span> Generator
              </p>
            </div>
          )}
        </div>
      </div>

      {/* Auth Modal */}
      <AuthModals
        isOpen={isAuthModalOpen}
        onClose={() => setIsAuthModalOpen(false)}
        initialMode="login"
      />

      {/* Discover Emojis Section */}
      <section className="py-16 bg-gradient-to-b from-[#0A0A0A] to-gray-900">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          {/* Section Header */}
          <div className="text-center mb-12">
            <h2 className="text-4xl md:text-5xl font-bold text-white mb-4">
              Discover Emojis
            </h2>
            <p className="text-xl text-gray-400 max-w-2xl mx-auto">
              Explore our collection of stunning 3D fluent-style emojis for every occasion
            </p>
          </div>

          {/* Emoji Grid */}
          <div className="grid grid-cols-3 sm:grid-cols-6 md:grid-cols-9 gap-4 md:gap-6">
            {/* Row 1 - Boys with striped shirts */}
            <FluentEmoji skinTone="bg-amber-200" hairColor="bg-black" hairStyle="h-3" shirtColor="bg-black" expression="neutral" />
            <FluentEmoji skinTone="bg-amber-300" hairColor="bg-amber-800" hairStyle="h-3" shirtColor="bg-amber-800" expression="neutral" />
            <FluentEmoji skinTone="bg-amber-400" hairColor="bg-amber-900" hairStyle="h-3" shirtColor="bg-gradient-to-r from-red-500 via-white to-blue-500" expression="neutral" />
            <FluentEmoji skinTone="bg-amber-500" hairColor="bg-black" hairStyle="h-3" shirtColor="bg-black" expression="neutral" />
            <FluentEmoji skinTone="bg-amber-100" hairColor="bg-amber-300" hairStyle="h-4" shirtColor="bg-blue-500" expression="neutral" />
            <FluentEmoji skinTone="bg-amber-100" hairColor="bg-amber-300" hairStyle="h-4" shirtColor="bg-red-500" expression="neutral" />
            <FluentEmoji skinTone="bg-amber-100" hairColor="bg-amber-300" hairStyle="h-4" shirtColor="bg-blue-500" expression="neutral" />
            <FluentEmoji skinTone="bg-amber-100" hairColor="bg-amber-300" hairStyle="h-4" shirtColor="bg-blue-500" expression="neutral" />
            <FluentEmoji skinTone="bg-amber-100" hairColor="bg-amber-300" hairStyle="h-3" shirtColor="bg-gradient-to-r from-yellow-400 to-black" expression="neutral" />

            {/* Row 2 - Girls with different features */}
            <FluentEmoji skinTone="bg-amber-500" hairColor="bg-black" hairStyle="h-4" shirtColor="bg-pink-400" expression="smile" />
            <FluentEmoji skinTone="bg-amber-400" hairColor="bg-amber-800" hairStyle="h-4" shirtColor="bg-gray-300" expression="neutral" />
            <FluentEmoji skinTone="bg-amber-100" hairColor="bg-amber-300" hairStyle="h-4" shirtColor="bg-blue-300" expression="smile" />
            <FluentEmoji skinTone="bg-amber-500" hairColor="bg-black" hairStyle="h-4" shirtColor="bg-gray-600" expression="smile" />
            <FluentEmoji skinTone="bg-amber-500" hairColor="bg-black" hairStyle="h-4" shirtColor="bg-blue-300" expression="smile" />
            <FluentEmoji skinTone="bg-amber-500" hairColor="bg-black" hairStyle="h-4" shirtColor="bg-blue-300" expression="smile" />
            <FluentEmoji skinTone="bg-amber-400" hairColor="bg-amber-800" hairStyle="h-4" shirtColor="bg-white" expression="neutral" />
            <FluentEmoji skinTone="bg-amber-500" hairColor="bg-black" hairStyle="h-4" shirtColor="bg-pink-400" expression="neutral" />
            <FluentEmoji skinTone="bg-amber-500" hairColor="bg-black" hairStyle="h-3" shirtColor="bg-white" expression="neutral" />

            {/* Row 3 - More characters with special features */}
            <FluentEmoji skinTone="bg-amber-500" hairColor="bg-black" hairStyle="h-4" shirtColor="bg-gray-600" expression="smile" />
            <FluentEmoji skinTone="bg-amber-100" hairColor="bg-amber-300" hairStyle="h-4" shirtColor="bg-gray-600" expression="smile" />
            <FluentEmoji skinTone="bg-amber-100" hairColor="bg-amber-300" hairStyle="h-4" shirtColor="bg-blue-500" expression="smile" />
            <FluentEmoji skinTone="bg-amber-300" hairColor="bg-gray-400" hairStyle="h-4" shirtColor="bg-blue-300" expression="surprised" />
            <FluentEmoji skinTone="bg-amber-500" hairColor="bg-black" hairStyle="h-4" shirtColor="bg-gray-600" expression="smile" />
            <FluentEmoji skinTone="bg-amber-100" hairColor="bg-red-600" hairStyle="h-4" shirtColor="bg-red-500" expression="smile" specialFeatures="devil-horns" />
            <FluentEmoji skinTone="bg-amber-100" hairColor="bg-red-600" hairStyle="h-4" shirtColor="bg-red-500" expression="smile" specialFeatures="devil-horns" />
            <FluentEmoji skinTone="bg-amber-100" hairColor="bg-red-600" hairStyle="h-4" shirtColor="bg-red-500" expression="smile" specialFeatures="devil-horns" />
            <FluentEmoji skinTone="bg-amber-100" hairColor="bg-red-600" hairStyle="h-4" shirtColor="bg-black" expression="neutral" specialFeatures="devil-horns" />
          </div>

          {/* Call to Action */}
          <div className="text-center mt-12">
            <button
              onClick={() => setIsAuthModalOpen(true)}
              className="inline-flex items-center px-8 py-4 bg-gradient-to-r from-gray-600 to-gray-700 hover:from-gray-500 hover:to-gray-600 text-white font-semibold rounded-xl transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl"
            >
              <span className="mr-2">🎨</span>
              Create Your Own Emoji
            </button>
          </div>
        </div>
      </section>
    </div>
  );
}

export default Hero; 